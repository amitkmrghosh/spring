<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<import resource="classpath:spring/infrastructure-batch.xml"/>

	<jdbc:embedded-database id="dataSource" type="HSQL">
		<jdbc:script location="classpath:/create-tables.sql"/>
	</jdbc:embedded-database>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<batch:job id="importProductsJob" job-repository="jobRepository">
		<batch:listeners>
			<batch:listener ref="importProductsJobListener"/>
		</batch:listeners>
		<batch:step id="readWrite">
			<batch:tasklet>
				<batch:chunk reader="productItemReader" writer="productItemWriter" commit-interval="100"/>
				<batch:listeners>
					<batch:listener ref="readWriteStepListener"/>
				</batch:listeners>
			</batch:tasklet>
		</batch:step>
	</batch:job>


	<bean id="importProductsJobListener" class="kr.spring.batch.chapter03.listener.ImportProductsJobListener"/>
	<bean id="readWriteStepListener" class="kr.spring.batch.chapter03.listener.ImportProductsExecutionListener"/>

	<bean id="productItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:/input/products-delimited.txt"/>
		<property name="linesToSkip" value="1"/>
		<property name="lineMapper" ref="productLineMapper"/>
	</bean>

	<bean id="productLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		<property name="lineTokenizer" ref="productLineTokenizer"/>
		<property name="fieldSetMapper" ref="productFieldSetMapper"/>
	</bean>

	<bean id="productLineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="delimiter" value=","/>
		<property name="names" value="id,name,description,price"/>
	</bean>
	<bean id="productFieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
		<property name="prototypeBeanName" value="product"/>
	</bean>

	<bean id="product" class="kr.spring.batch.chapter03.Product" scope="prototype"/>

	<bean id="productPreparedStatementSetter" class="kr.spring.batch.chapter03.ProductPrepareStatementSetter"/>

	<bean id="productItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource"/>
		<property name="sql" value="insert into product (id,name,description,price) values(?,?,?,?)"/>
		<property name="itemPreparedStatementSetter" ref="productPreparedStatementSetter"/>
	</bean>

</beans>