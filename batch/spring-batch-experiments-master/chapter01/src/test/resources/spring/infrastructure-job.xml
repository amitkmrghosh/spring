<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <import resource="classpath:spring/infrastructure-batch.xml"/>

    <jdbc:embedded-database id="dataSource" type="HSQL">
        <jdbc:script location="/create-tables.sql"/>
    </jdbc:embedded-database>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <batch:job id="importProducts" job-repository="jobRepository">
        <batch:step id="decompress" next="readWriteProducts">
            <batch:tasklet ref="decompressTasklet"/>
        </batch:step>
        <batch:step id="readWriteProducts">
            <batch:tasklet>
                <batch:chunk reader="reader" writer="writer" commit-interval="3" skip-limit="5">
                    <batch:skippable-exception-classes>
                        <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="decompressTasklet" class="kr.spring.batch.chapter01.batch.DecompressTasklet" scope="step">
        <property name="inputResource" value="#{jobParameters['inputResource']}"/>
        <property name="targetDirectory" value="#{jobParameters['targetDirectory']}"/>
        <property name="targetFile" value="#{jobParameters['targetFile']}"/>
    </bean>

    <bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="file:#{jobParameters['targetDirectory'] + jobParameters['targetFile']}"/>
        <property name="linesToSkip" value="1"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="PRODUCT_ID,NAME,DESCRIPTION,PRICE"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="kr.spring.batch.chapter01.batch.ProductFieldSetMapper"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="writer" class="kr.spring.batch.chapter01.batch.ProductJdbcItemWriter">
        <constructor-arg ref="dataSource"/>
    </bean>
</beans>